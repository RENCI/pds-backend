# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.decision_tree import DecisionTree  # noqa: F401,E501
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server import util


class DecisionTreeInternalSubtrees(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, value: Object=None, subtree: DecisionTree=None):  # noqa: E501
        """DecisionTreeInternalSubtrees - a model defined in Swagger

        :param value: The value of this DecisionTreeInternalSubtrees.  # noqa: E501
        :type value: Object
        :param subtree: The subtree of this DecisionTreeInternalSubtrees.  # noqa: E501
        :type subtree: DecisionTree
        """
        self.swagger_types = {
            'value': Object,
            'subtree': DecisionTree
        }

        self.attribute_map = {
            'value': 'value',
            'subtree': 'subtree'
        }
        self._value = value
        self._subtree = subtree

    @classmethod
    def from_dict(cls, dikt) -> 'DecisionTreeInternalSubtrees':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DecisionTreeInternal_subtrees of this DecisionTreeInternalSubtrees.  # noqa: E501
        :rtype: DecisionTreeInternalSubtrees
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> Object:
        """Gets the value of this DecisionTreeInternalSubtrees.


        :return: The value of this DecisionTreeInternalSubtrees.
        :rtype: Object
        """
        return self._value

    @value.setter
    def value(self, value: Object):
        """Sets the value of this DecisionTreeInternalSubtrees.


        :param value: The value of this DecisionTreeInternalSubtrees.
        :type value: Object
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def subtree(self) -> DecisionTree:
        """Gets the subtree of this DecisionTreeInternalSubtrees.


        :return: The subtree of this DecisionTreeInternalSubtrees.
        :rtype: DecisionTree
        """
        return self._subtree

    @subtree.setter
    def subtree(self, subtree: DecisionTree):
        """Sets the subtree of this DecisionTreeInternalSubtrees.


        :param subtree: The subtree of this DecisionTreeInternalSubtrees.
        :type subtree: DecisionTree
        """
        if subtree is None:
            raise ValueError("Invalid value for `subtree`, must not be `None`")  # noqa: E501

        self._subtree = subtree
