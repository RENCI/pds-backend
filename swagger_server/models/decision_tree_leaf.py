# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.decision_tree_leaf_path import DecisionTreeLeafPath  # noqa: F401,E501
from swagger_server import util


class DecisionTreeLeaf(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, plugin_id: str=None, model: str=None, path: List[DecisionTreeLeafPath]=None, key_clinical_properties: object=None):  # noqa: E501
        """DecisionTreeLeaf - a model defined in Swagger

        :param plugin_id: The plugin_id of this DecisionTreeLeaf.  # noqa: E501
        :type plugin_id: str
        :param model: The model of this DecisionTreeLeaf.  # noqa: E501
        :type model: str
        :param path: The path of this DecisionTreeLeaf.  # noqa: E501
        :type path: List[DecisionTreeLeafPath]
        :param key_clinical_properties: The key_clinical_properties of this DecisionTreeLeaf.  # noqa: E501
        :type key_clinical_properties: object
        """
        self.swagger_types = {
            'plugin_id': str,
            'model': str,
            'path': List[DecisionTreeLeafPath],
            'key_clinical_properties': object
        }

        self.attribute_map = {
            'plugin_id': 'pluginId',
            'model': 'model',
            'path': 'path',
            'key_clinical_properties': 'keyClinicalProperties'
        }
        self._plugin_id = plugin_id
        self._model = model
        self._path = path
        self._key_clinical_properties = key_clinical_properties

    @classmethod
    def from_dict(cls, dikt) -> 'DecisionTreeLeaf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DecisionTreeLeaf of this DecisionTreeLeaf.  # noqa: E501
        :rtype: DecisionTreeLeaf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plugin_id(self) -> str:
        """Gets the plugin_id of this DecisionTreeLeaf.


        :return: The plugin_id of this DecisionTreeLeaf.
        :rtype: str
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id: str):
        """Sets the plugin_id of this DecisionTreeLeaf.


        :param plugin_id: The plugin_id of this DecisionTreeLeaf.
        :type plugin_id: str
        """
        if plugin_id is None:
            raise ValueError("Invalid value for `plugin_id`, must not be `None`")  # noqa: E501

        self._plugin_id = plugin_id

    @property
    def model(self) -> str:
        """Gets the model of this DecisionTreeLeaf.


        :return: The model of this DecisionTreeLeaf.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this DecisionTreeLeaf.


        :param model: The model of this DecisionTreeLeaf.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def path(self) -> List[DecisionTreeLeafPath]:
        """Gets the path of this DecisionTreeLeaf.


        :return: The path of this DecisionTreeLeaf.
        :rtype: List[DecisionTreeLeafPath]
        """
        return self._path

    @path.setter
    def path(self, path: List[DecisionTreeLeafPath]):
        """Sets the path of this DecisionTreeLeaf.


        :param path: The path of this DecisionTreeLeaf.
        :type path: List[DecisionTreeLeafPath]
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def key_clinical_properties(self) -> object:
        """Gets the key_clinical_properties of this DecisionTreeLeaf.


        :return: The key_clinical_properties of this DecisionTreeLeaf.
        :rtype: object
        """
        return self._key_clinical_properties

    @key_clinical_properties.setter
    def key_clinical_properties(self, key_clinical_properties: object):
        """Sets the key_clinical_properties of this DecisionTreeLeaf.


        :param key_clinical_properties: The key_clinical_properties of this DecisionTreeLeaf.
        :type key_clinical_properties: object
        """
        if key_clinical_properties is None:
            raise ValueError("Invalid value for `key_clinical_properties`, must not be `None`")  # noqa: E501

        self._key_clinical_properties = key_clinical_properties
